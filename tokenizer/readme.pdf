In this implementation of the tokenizer, the tokenizer struct acts as a node-like structure. The token of type char* is a pointer to the dynamically allocated token string  and the nextToken is a struct pointer of the same type that points to the next tokenizer. The struct will act as a linked list and each node/tokenizer in the linked list will hold each token. The "viewed" int acts as a boolean value to determine whether or not a certain tokenizer node has been seen already by the getNextToken function.

In the main function, the input string for the tokens is parsed by checking each character and calling the checkEscapce function if a backslash character is found. This function checks to see if the following character suggests that the backslash is part of an escape character. This function also calls the checkSep function if an escape character is found. The checkSep function simply checks to see if an escape character is also a separator character based on the input separator string. It returns an int value that alters the length of the final output string if need be.

Back in the main function, if the length of the input string is different than that of the calculated size of the final output string, the fixEscape function is called. This function iterates through the input string replacing (non-separator) escape characters with their hex form, and removes all extra backslashes. It returns the new parsed string. fixEscape runs in worst case O(n) time, where n is the number of characters in the input token string.

Once the input strings are parsed, the TKCreate function is called. This function creates the tokenizer struct based on the input strings in worst case O(np) time, where n is the number of characters in the token input string and p is the number of characters in the separator input string. It is responsible for finding the separator characters in the token input string and using these as start/endpoints for the tokens that will be printed at the end of the program. It also dynamically allocates space for a new tokenizer object and initializes it each time a new token is found. 

An important feature of the TKCreate function is that it copies the input strings into new char arrays so that a char at a specific index of the string can be manipulated. To assist with this, the substring function is called. The substring function takes the starting and ending indecis within the char array of the token in question, converts it into a properly formatted token of type char pointer, and returns a char pointer to the beginning of the new token.

The TKGetNextToken function gets the next token from the linked list each time it is called. It checks to see if the token is viewed (if the viewed field is 1) and returns a char* to the first token in which the viewed field is equal to 0. This function runs in O(h) time, where h is the number of tokens in the linked list. The main functoin calls TKGetNextToken on the tokenizer until there are no more unviewed tokens. The Tkdestory functionthen deletes dynamically allocated memory such as the tokenizerT_ structs and dymanically allocated tokens. 

Overall, this program runs in O(n + np + h), which is big O(np). Note that n, p, and h have been defined above. The program is memory efficient because it uses a linked list to get the exact number of tokens and store them. In addition, each string is copied into a char array with the exact size necessary. 
